{
  "name": "select",
  "dependencies": [
    "react-aria-components"
  ],
  "registryDependencies": [
    "field",
    "popover"
  ],
  "files": [
    {
      "name": "select.tsx",
      "content": "\"use client\"\n\nimport { ChevronDown } from \"lucide-react\"\nimport {\n  Button as AriaButton,\n  ButtonProps as AriaButtonProps,\n  ListBox as AriaListBox,\n  ListBoxProps as AriaListBoxProps,\n  PopoverProps as AriaPopoverProps,\n  Select as AriaSelect,\n  SelectProps as AriaSelectProps,\n  SelectValue as AriaSelectValue,\n  SelectValueProps as AriaSelectValueProps,\n  ValidationResult as AriaValidationResult,\n  composeRenderProps,\n  Text,\n} from \"react-aria-components\"\n\nimport { cn } from \"@/lib/utils\"\n\nimport { FieldError, Label } from \"./field\"\nimport {\n  ListBoxCollection,\n  ListBoxHeader,\n  ListBoxItem,\n  ListBoxSection,\n} from \"./list-box\"\nimport { Popover } from \"./popover\"\n\nconst Select = AriaSelect\n\nconst SelectItem = ListBoxItem\n\nconst SelectHeader = ListBoxHeader\n\nconst SelectSection = ListBoxSection\n\nconst SelectCollection = ListBoxCollection\n\nconst SelectValue = <T extends object>({\n  className,\n  ...props\n}: AriaSelectValueProps<T>) => (\n  <AriaSelectValue\n    className={composeRenderProps(className, (className) =>\n      cn(\n        \"line-clamp-1 data-[placeholder]:text-muted-foreground\",\n        /* Description */\n        \"[&>[slot=description]]:hidden\",\n        className\n      )\n    )}\n    {...props}\n  />\n)\n\nconst SelectTrigger = ({ className, children, ...props }: AriaButtonProps) => (\n  <AriaButton\n    className={composeRenderProps(className, (className) =>\n      cn(\n        \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background\",\n        /* Disabled */\n        \"data-[disabled]:cursor-not-allowed data-[disabled]:opacity-50\",\n        /* Focused */\n        \"data-[focused]:outline-none data-[focused]:ring-2 data-[focused]:ring-ring data-[focused]:ring-offset-2\",\n        className\n      )\n    )}\n    {...props}\n  >\n    {composeRenderProps(children, (children) => (\n      <>\n        {children}\n        <ChevronDown aria-hidden=\"true\" className=\"size-4 opacity-50\" />\n      </>\n    ))}\n  </AriaButton>\n)\n\nconst SelectPopover = ({ className, ...props }: AriaPopoverProps) => (\n  <Popover\n    className={composeRenderProps(className, (className) =>\n      cn(\"w-[--trigger-width]\", className)\n    )}\n    {...props}\n  />\n)\n\nconst SelectListBox = <T extends object>({\n  className,\n  ...props\n}: AriaListBoxProps<T>) => (\n  <AriaListBox\n    className={composeRenderProps(className, (className) =>\n      cn(\n        \"max-h-[inherit] overflow-auto p-1 outline-none [clip-path:inset(0_0_0_0_round_calc(var(--radius)-2px))]\",\n        className\n      )\n    )}\n    {...props}\n  />\n)\n\ninterface JollySelectProps<T extends object>\n  extends Omit<AriaSelectProps<T>, \"children\"> {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: AriaValidationResult) => string)\n  items?: Iterable<T>\n  children: React.ReactNode | ((item: T) => React.ReactNode)\n}\n\nfunction JollySelect<T extends object>({\n  label,\n  description,\n  errorMessage,\n  children,\n  className,\n  items,\n  ...props\n}: JollySelectProps<T>) {\n  return (\n    <Select\n      className={composeRenderProps(className, (className) =>\n        cn(\"group flex flex-col gap-2\", className)\n      )}\n      {...props}\n    >\n      <Label>{label}</Label>\n      <SelectTrigger>\n        <SelectValue />\n      </SelectTrigger>\n      {description && (\n        <Text className=\"text-sm text-muted-foreground\" slot=\"description\">\n          {description}\n        </Text>\n      )}\n      <FieldError>{errorMessage}</FieldError>\n      <SelectPopover>\n        <SelectListBox items={items}>{children}</SelectListBox>\n      </SelectPopover>\n    </Select>\n  )\n}\n\nexport {\n  Select,\n  SelectValue,\n  SelectTrigger,\n  SelectItem,\n  SelectPopover,\n  SelectHeader,\n  SelectListBox,\n  SelectSection,\n  SelectCollection,\n  JollySelect,\n}\nexport type { JollySelectProps }\n"
    }
  ],
  "type": "components:ui"
}