{
  "name": "calendar",
  "dependencies": [
    "react-aria-components"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "name": "calendar.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { getLocalTimeZone, today } from \"@internationalized/date\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport {\n  Button as AriaButton,\n  Calendar as AriaCalendar,\n  CalendarCell as AriaCalendarCell,\n  CalendarCellProps as AriaCalendarCellProps,\n  CalendarGrid as AriaCalendarGrid,\n  CalendarGridBody as AriaCalendarGridBody,\n  CalendarGridBodyProps as AriaCalendarGridBodyProps,\n  CalendarGridHeader as AriaCalendarGridHeader,\n  CalendarGridHeaderProps as AriaCalendarGridHeaderProps,\n  CalendarGridProps as AriaCalendarGridProps,\n  CalendarHeaderCell as AriaCalendarHeaderCell,\n  CalendarHeaderCellProps as AriaCalendarHeaderCellProps,\n  Heading as AriaHeading,\n  RangeCalendar as AriaRangeCalendar,\n  RangeCalendarStateContext as AriaRangeCalendarStateContext,\n  composeRenderProps,\n  useLocale,\n} from \"react-aria-components\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/registry/default/ui/button\"\n\nconst Calendar = AriaCalendar\n\nconst RangeCalendar = AriaRangeCalendar\n\nconst CalendarHeading = (props: React.HTMLAttributes<HTMLElement>) => {\n  let { direction } = useLocale()\n\n  return (\n    <header className=\"flex w-full items-center gap-1 px-1 pb-4\" {...props}>\n      <AriaButton\n        slot=\"previous\"\n        className={cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"size-7 bg-transparent p-0 opacity-50\",\n          /* Hover */\n          \"data-[hovered]:opacity-100\"\n        )}\n      >\n        {direction === \"rtl\" ? (\n          <ChevronRight aria-hidden className=\"size-4\" />\n        ) : (\n          <ChevronLeft aria-hidden className=\"size-4\" />\n        )}\n      </AriaButton>\n      <AriaHeading className=\"grow text-center text-sm font-medium\" />\n      <AriaButton\n        slot=\"next\"\n        className={cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"size-7 bg-transparent p-0 opacity-50\",\n          /* Hover */\n          \"data-[hovered]:opacity-100\"\n        )}\n      >\n        {direction === \"rtl\" ? (\n          <ChevronLeft aria-hidden className=\"size-4\" />\n        ) : (\n          <ChevronRight aria-hidden className=\"size-4\" />\n        )}\n      </AriaButton>\n    </header>\n  )\n}\n\nconst CalendarGrid = ({ className, ...props }: AriaCalendarGridProps) => (\n  <AriaCalendarGrid\n    className={cn(\n      \" border-separate border-spacing-x-0 border-spacing-y-1 \",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst CalendarGridHeader = ({\n  className,\n  ...props\n}: AriaCalendarGridHeaderProps) => <AriaCalendarGridHeader {...props} />\n\nconst CalendarHeaderCell = ({\n  className,\n  ...props\n}: AriaCalendarHeaderCellProps) => (\n  <AriaCalendarHeaderCell\n    className=\"w-9 rounded-md text-[0.8rem] font-normal text-muted-foreground\"\n    {...props}\n  />\n)\n\nconst CalendarGridBody = ({\n  className,\n  ...props\n}: AriaCalendarGridBodyProps) => (\n  <AriaCalendarGridBody className={cn(\"[&>tr>td]:p-0 \")} {...props} />\n)\n\nconst CalendarCell = ({ className, ...props }: AriaCalendarCellProps) => {\n  const isRange = Boolean(React.useContext(AriaRangeCalendarStateContext))\n  return (\n    <AriaCalendarCell\n      className={composeRenderProps(className, (className, renderProps) =>\n        cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"relative flex size-9 items-center justify-center p-0 text-sm font-normal\",\n          /* Disabled */\n          renderProps.isDisabled && \"text-muted-foreground opacity-50\",\n          /* Selected */\n          renderProps.isSelected &&\n            \"bg-primary text-primary-foreground data-[focused]:bg-primary  data-[focused]:text-primary-foreground\",\n          /* Hover */\n          renderProps.isHovered &&\n            renderProps.isSelected &&\n            (renderProps.isSelectionStart ||\n              renderProps.isSelectionEnd ||\n              !isRange) &&\n            \"data-[hovered]:bg-primary data-[hovered]:text-primary-foreground\",\n          /* Selection Start/End */\n          renderProps.isSelected &&\n            isRange &&\n            !renderProps.isSelectionStart &&\n            !renderProps.isSelectionEnd &&\n            \"rounded-none bg-accent text-accent-foreground\",\n          /* Outside Month */\n          renderProps.isOutsideMonth &&\n            \"text-muted-foreground opacity-50 data-[selected]:bg-accent/50 data-[selected]:text-muted-foreground data-[selected]:opacity-30\",\n          /* Current Date */\n          renderProps.date.compare(today(getLocalTimeZone())) === 0 &&\n            \"bg-accent text-accent-foreground\",\n          className\n        )\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Calendar,\n  CalendarCell,\n  CalendarGrid,\n  CalendarGridBody,\n  CalendarGridHeader,\n  CalendarHeaderCell,\n  CalendarHeading,\n  RangeCalendar,\n}\n"
    }
  ],
  "type": "components:ui"
}