{
  "name": "calendar",
  "dependencies": [
    "react-aria-components",
    "@internationalized/date"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "name": "calendar.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { getLocalTimeZone, today } from \"@internationalized/date\"\nimport { ChevronLeftIcon, ChevronRightIcon } from \"@radix-ui/react-icons\"\nimport {\n  Button as AriaButton,\n  Calendar as AriaCalendar,\n  CalendarCell as AriaCalendarCell,\n  CalendarCellProps as AriaCalendarCellProps,\n  CalendarGrid as AriaCalendarGrid,\n  CalendarGridBody as AriaCalendarGridBody,\n  CalendarGridBodyProps as AriaCalendarGridBodyProps,\n  CalendarGridHeader as AriaCalendarGridHeader,\n  CalendarGridHeaderProps as AriaCalendarGridHeaderProps,\n  CalendarGridProps as AriaCalendarGridProps,\n  CalendarHeaderCell as AriaCalendarHeaderCell,\n  CalendarHeaderCellProps as AriaCalendarHeaderCellProps,\n  CalendarProps as AriaCalendarProps,\n  DateValue as AriaDateValue,\n  Heading as AriaHeading,\n  RangeCalendar as AriaRangeCalendar,\n  RangeCalendarProps as AriaRangeCalendarProps,\n  RangeCalendarStateContext as AriaRangeCalendarStateContext,\n  composeRenderProps,\n  Text,\n  useLocale,\n} from \"react-aria-components\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/registry/new-york/ui/button\"\n\nconst Calendar = AriaCalendar\n\nconst RangeCalendar = AriaRangeCalendar\n\nconst CalendarHeading = (props: React.HTMLAttributes<HTMLElement>) => {\n  let { direction } = useLocale()\n\n  return (\n    <header className=\"flex w-full items-center gap-1 px-1 pb-4\" {...props}>\n      <AriaButton\n        slot=\"previous\"\n        className={cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"size-7 bg-transparent p-0 opacity-50\",\n          /* Hover */\n          \"data-[hovered]:opacity-100\"\n        )}\n      >\n        {direction === \"rtl\" ? (\n          <ChevronRightIcon aria-hidden className=\"size-4\" />\n        ) : (\n          <ChevronLeftIcon aria-hidden className=\"size-4\" />\n        )}\n      </AriaButton>\n      <AriaHeading className=\"grow text-center text-sm font-medium\" />\n      <AriaButton\n        slot=\"next\"\n        className={cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"size-7 bg-transparent p-0 opacity-50\",\n          /* Hover */\n          \"data-[hovered]:opacity-100\"\n        )}\n      >\n        {direction === \"rtl\" ? (\n          <ChevronLeftIcon aria-hidden className=\"size-4\" />\n        ) : (\n          <ChevronRightIcon aria-hidden className=\"size-4\" />\n        )}\n      </AriaButton>\n    </header>\n  )\n}\n\nconst CalendarGrid = ({ className, ...props }: AriaCalendarGridProps) => (\n  <AriaCalendarGrid\n    className={cn(\n      \" border-separate border-spacing-x-0 border-spacing-y-1 \",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst CalendarGridHeader = ({ ...props }: AriaCalendarGridHeaderProps) => (\n  <AriaCalendarGridHeader {...props} />\n)\n\nconst CalendarHeaderCell = ({\n  className,\n  ...props\n}: AriaCalendarHeaderCellProps) => (\n  <AriaCalendarHeaderCell\n    className={cn(\n      \"w-8 rounded-md text-[0.8rem] font-normal text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst CalendarGridBody = ({\n  className,\n  ...props\n}: AriaCalendarGridBodyProps) => (\n  <AriaCalendarGridBody className={cn(\"[&>tr>td]:p-0\", className)} {...props} />\n)\n\nconst CalendarCell = ({ className, ...props }: AriaCalendarCellProps) => {\n  const isRange = Boolean(React.useContext(AriaRangeCalendarStateContext))\n  return (\n    <AriaCalendarCell\n      className={composeRenderProps(className, (className, renderProps) =>\n        cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"relative flex size-8 items-center justify-center p-0 text-sm font-normal\",\n          /* Disabled */\n          renderProps.isDisabled && \"text-muted-foreground opacity-50\",\n          /* Selected */\n          renderProps.isSelected &&\n            \"bg-primary text-primary-foreground data-[focused]:bg-primary  data-[focused]:text-primary-foreground\",\n          /* Hover */\n          renderProps.isHovered &&\n            renderProps.isSelected &&\n            (renderProps.isSelectionStart ||\n              renderProps.isSelectionEnd ||\n              !isRange) &&\n            \"data-[hovered]:bg-primary data-[hovered]:text-primary-foreground\",\n          /* Selection Start/End */\n          renderProps.isSelected &&\n            isRange &&\n            !renderProps.isSelectionStart &&\n            !renderProps.isSelectionEnd &&\n            \"rounded-none bg-accent text-accent-foreground\",\n          /* Outside Month */\n          renderProps.isOutsideMonth &&\n            \"text-muted-foreground opacity-50 data-[selected]:bg-accent/50 data-[selected]:text-muted-foreground data-[selected]:opacity-30\",\n          /* Current Date */\n          renderProps.date.compare(today(getLocalTimeZone())) === 0 &&\n            !renderProps.isSelected &&\n            \"bg-accent text-accent-foreground\",\n          /* Unavailable Date */\n          renderProps.isUnavailable && \"cursor-default text-destructive \",\n          renderProps.isInvalid &&\n            \"bg-destructive text-destructive-foreground data-[focused]:bg-destructive data-[hovered]:bg-destructive data-[focused]:text-destructive-foreground data-[hovered]:text-destructive-foreground\",\n          className\n        )\n      )}\n      {...props}\n    />\n  )\n}\n\ninterface JollyCalendarProps<T extends AriaDateValue>\n  extends AriaCalendarProps<T> {\n  errorMessage?: string\n}\n\nfunction JollyCalendar<T extends AriaDateValue>({\n  errorMessage,\n  className,\n  ...props\n}: JollyCalendarProps<T>) {\n  return (\n    <Calendar\n      className={composeRenderProps(className, (className) =>\n        cn(\"w-fit\", className)\n      )}\n      {...props}\n    >\n      <CalendarHeading />\n      <CalendarGrid>\n        <CalendarGridHeader>\n          {(day) => <CalendarHeaderCell>{day}</CalendarHeaderCell>}\n        </CalendarGridHeader>\n        <CalendarGridBody>\n          {(date) => <CalendarCell date={date} />}\n        </CalendarGridBody>\n      </CalendarGrid>\n      {errorMessage && (\n        <Text className=\"text-sm text-destructive\" slot=\"errorMessage\">\n          {errorMessage}\n        </Text>\n      )}\n    </Calendar>\n  )\n}\n\ninterface JollyRangeCalendarProps<T extends AriaDateValue>\n  extends AriaRangeCalendarProps<T> {\n  errorMessage?: string\n}\n\nfunction JollyRangeCalendar<T extends AriaDateValue>({\n  errorMessage,\n  className,\n  ...props\n}: JollyRangeCalendarProps<T>) {\n  return (\n    <RangeCalendar\n      className={composeRenderProps(className, (className) =>\n        cn(\"w-fit\", className)\n      )}\n      {...props}\n    >\n      <CalendarHeading />\n      <CalendarGrid>\n        <CalendarGridHeader>\n          {(day) => <CalendarHeaderCell>{day}</CalendarHeaderCell>}\n        </CalendarGridHeader>\n        <CalendarGridBody>\n          {(date) => <CalendarCell date={date} />}\n        </CalendarGridBody>\n      </CalendarGrid>\n      {errorMessage && (\n        <Text slot=\"errorMessage\" className=\"text-sm text-destructive\">\n          {errorMessage}\n        </Text>\n      )}\n    </RangeCalendar>\n  )\n}\n\nexport {\n  Calendar,\n  CalendarCell,\n  CalendarGrid,\n  CalendarGridBody,\n  CalendarGridHeader,\n  CalendarHeaderCell,\n  CalendarHeading,\n  RangeCalendar,\n  JollyCalendar,\n  JollyRangeCalendar,\n}\n\nexport type { JollyCalendarProps, JollyRangeCalendarProps }\n"
    }
  ],
  "type": "components:ui"
}