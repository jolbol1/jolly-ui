{
  "name": "dialog",
  "dependencies": [
    "@radix-ui/react-dialog"
  ],
  "files": [
    {
      "name": "dialog.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Cross2Icon } from \"@radix-ui/react-icons\"\nimport {\n  Button,\n  Dialog,\n  DialogProps,\n  DialogTrigger,\n  Heading,\n  HeadingProps,\n  Modal,\n  ModalOverlay,\n  ModalOverlayProps,\n} from \"react-aria-components\"\n\nimport { cn, cnv } from \"@/lib/utils\"\n\nconst _DialogTrigger = DialogTrigger\n\nconst _DialogOverlay = ({\n  className,\n  isDismissable = true,\n  ...props\n}: ModalOverlayProps) => (\n  <ModalOverlay\n    isDismissable={isDismissable}\n    className={(values) =>\n      cnv(\n        values,\n        \"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[entering]:animate-in data-[exiting]:animate-out data-[exiting]:fade-out-0 data-[entering]:fade-in-0\",\n        className\n      )\n    }\n    {...props}\n  />\n)\n\nexport interface DialogContentProps\n  extends Omit<React.ComponentPropsWithoutRef<typeof Modal>, \"children\"> {\n  children?: DialogProps[\"children\"]\n  role?: DialogProps[\"role\"]\n  closeButton?: boolean\n}\n\nconst DialogContent = ({\n  className,\n  children,\n  role,\n  closeButton = true,\n  ...props\n}: DialogContentProps) => (\n  <Modal\n    className={(values) =>\n      cnv(\n        values,\n        \"fixed left-[50%] top-[50%] z-50 w-full max-w-lg translate-x-[-50%] translate-y-[-50%] border bg-background p-6 shadow-lg duration-200 data-[entering]:animate-in data-[exiting]:animate-out data-[exiting]:fade-out-0 data-[entering]:fade-in-0 data-[exiting]:zoom-out-95 data-[entering]:zoom-in-95 data-[exiting]:slide-out-to-left-1/2 data-[exiting]:slide-out-to-top-[48%] data-[entering]:slide-in-from-left-1/2 data-[entering]:slide-in-from-top-[48%] sm:rounded-lg md:w-full\",\n        className\n      )\n    }\n    {...props}\n  >\n    <Dialog role={role} className=\"grid h-full gap-4 outline-none\">\n      {(values) => (\n        <>\n          {typeof children === \"function\" ? children(values) : children}\n          {closeButton && (\n            <Button\n              onPress={values.close}\n              className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[entering]:bg-accent data-[entering]:text-muted-foreground\"\n            >\n              <Cross2Icon className=\"h-4 w-4\" />\n              <span className=\"sr-only\">Close</span>\n            </Button>\n          )}\n        </>\n      )}\n    </Dialog>\n  </Modal>\n)\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst DialogTitle = ({ className, ...props }: HeadingProps) => (\n  <Heading\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n)\n\nexport {\n  _DialogOverlay as DialogOverlay,\n  _DialogTrigger as DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n}\n"
    }
  ],
  "type": "components:ui"
}