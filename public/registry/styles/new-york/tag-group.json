{
  "name": "tag-group",
  "dependencies": [
    "react-aria-components",
    "class-variance-authority"
  ],
  "registryDependencies": [
    "field"
  ],
  "files": [
    {
      "name": "tag-group.tsx",
      "content": "import { Cross2Icon } from \"@radix-ui/react-icons\"\nimport { cva } from \"class-variance-authority\"\nimport {\n  Button as AriaButton,\n  Tag as AriaTag,\n  TagGroup as AriaTagGroup,\n  TagGroupProps as AriaTagGroupProps,\n  TagList as AriaTagList,\n  TagListProps as AriaTagListProps,\n  TagProps as AriaTagProps,\n  composeRenderProps,\n  Text,\n} from \"react-aria-components\"\n\nimport { cn } from \"@/lib/utils\"\n\nimport { Label } from \"./field\"\n\nconst TagGroup = AriaTagGroup\n\nfunction TagList<T extends object>({\n  className,\n  ...props\n}: AriaTagListProps<T>) {\n  return (\n    <AriaTagList\n      className={composeRenderProps(className, (className) =>\n        cn(\n          \"flex flex-wrap gap-2\",\n          /* Empty */\n          \"data-[empty]:text-sm data-[empty]:text-muted-foreground\",\n          className\n        )\n      )}\n      {...props}\n    />\n  )\n}\n\nconst badgeVariants = cva(\n  [\n    \"inline-flex items-center gap-2 rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors\",\n    /* Focus */\n    \"data-[focused]:outline-none data-[focused]:ring-1 data-[focused]:ring-ring \",\n    /* Disabled */\n    \"data-[disabled]:cursor-not-allowed data-[disabled]:opacity-50\",\n  ],\n  {\n    variants: {\n      variant: {\n        default: [\n          \"border-transparent bg-primary text-primary-foreground shadow\",\n          /* Hover */\n          \"data-[hovered]:bg-primary/80\",\n        ],\n        secondary: [\n          \"border-transparent bg-secondary text-secondary-foreground\",\n          /* Hover */\n          \"data-[hovered]:bg-secondary/80\",\n        ],\n        destructive: [\n          \"border-transparent bg-destructive text-destructive-foreground shadow\",\n          /* Hover */\n          \"data-[hovered]:bg-destructive/80\",\n        ],\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Tag({ children, className, ...props }: AriaTagProps) {\n  let textValue = typeof children === \"string\" ? children : undefined\n  return (\n    <AriaTag\n      textValue={textValue}\n      className={composeRenderProps(className, (className, renderProps) =>\n        cn(\n          badgeVariants({\n            variant:\n              renderProps.selectionMode === \"none\" || renderProps.isSelected\n                ? \"default\"\n                : \"secondary\",\n          }),\n          renderProps.allowsRemoving && \"pr-1\",\n          className\n        )\n      )}\n      {...props}\n    >\n      {composeRenderProps(children, (children, renderProps) => (\n        <>\n          {children}\n          {renderProps.allowsRemoving && (\n            <AriaButton\n              slot=\"remove\"\n              className={cn(\n                \"rounded-sm opacity-70 ring-offset-background transition-opacity\",\n                /* Hover */\n                \"data-[hovered]:opacity-100\",\n                /* Resets */\n                \"focus-visible:outline-none\",\n                className\n              )}\n            >\n              <Cross2Icon aria-hidden className=\"size-3\" />\n            </AriaButton>\n          )}\n        </>\n      ))}\n    </AriaTag>\n  )\n}\n\ninterface JollyTagGroupProps<T>\n  extends Omit<AriaTagGroupProps, \"children\">,\n    Pick<AriaTagListProps<T>, \"items\" | \"children\" | \"renderEmptyState\"> {\n  label?: string\n  description?: string\n  errorMessage?: string\n}\n\nfunction JollyTagGroup<T extends object>({\n  label,\n  description,\n  className,\n  errorMessage,\n  items,\n  children,\n  renderEmptyState,\n  ...props\n}: JollyTagGroupProps<T>) {\n  return (\n    <TagGroup className={cn(\"group flex flex-col gap-2\", className)} {...props}>\n      <Label>{label}</Label>\n      <TagList items={items} renderEmptyState={renderEmptyState}>\n        {children}\n      </TagList>\n      {description && (\n        <Text className=\"text-sm text-muted-foreground\" slot=\"description\">\n          {description}\n        </Text>\n      )}\n      {errorMessage && (\n        <Text className=\"text-sm text-destructive\" slot=\"errorMessage\">\n          {errorMessage}\n        </Text>\n      )}\n    </TagGroup>\n  )\n}\n\nexport { TagGroup, TagList, Tag, badgeVariants, JollyTagGroup }\nexport type { JollyTagGroupProps }\n"
    }
  ],
  "type": "components:ui"
}