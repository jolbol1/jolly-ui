{
  "name": "disclosure",
  "type": "registry:ui",
  "dependencies": [
    "react-aria-components"
  ],
  "files": [
    {
      "path": "ui/disclosure.tsx",
      "content": "\"use client\"\n\nimport React, { useContext } from \"react\"\nimport { ChevronDownIcon } from \"@radix-ui/react-icons\"\nimport {\n  UNSTABLE_Disclosure as AriaDisclosure,\n  UNSTABLE_DisclosureGroup as AriaDisclosureGroup,\n  DisclosureGroupProps as AriaDisclosureGroupProps,\n  UNSTABLE_DisclosurePanel as AriaDisclosurePanel,\n  DisclosurePanelProps as AriaDisclosurePanelProps,\n  DisclosureProps as AriaDisclosureProps,\n  Button,\n  ButtonProps,\n  DisclosureGroupStateContext,\n  Heading,\n  composeRenderProps,\n} from \"react-aria-components\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface DisclosureProps extends AriaDisclosureProps {\n  children: React.ReactNode\n}\n\nfunction Disclosure({ children, className, ...props }: DisclosureProps) {\n  let isInGroup = useContext(DisclosureGroupStateContext) !== null\n  return (\n    <AriaDisclosure\n      {...props}\n      className={composeRenderProps(className, (className, renderProps) =>\n        cn(\n          \"group min-w-64\",\n          isInGroup && \"border-0 border-b last:border-b-0\",\n          className\n        )\n      )}\n    >\n      {children}\n    </AriaDisclosure>\n  )\n}\n\nexport interface DisclosureHeaderProps {\n  children: React.ReactNode\n  className?: ButtonProps[\"className\"]\n}\n\nfunction DisclosureHeader({ children, className }: DisclosureHeaderProps) {\n  return (\n    <Heading className=\"flex\">\n      <Button\n        slot=\"trigger\"\n        className={composeRenderProps(className, (className) => {\n          return cn(\n            \"group rounded-md ring-offset-background transition-colors flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline\",\n            \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n            \"data-[focus-visible]:outline-none data-[focus-visible]:ring-2 data-[focus-visible]:ring-ring data-[focus-visible]:ring-offset-2\",\n            \"outline-none\",\n            className\n          )\n        })}\n      >\n        {children}\n        <ChevronDownIcon\n          aria-hidden\n          className={cn(\n            \"h-4 w-4 shrink-0 transition-transform duration-200 text-muted-foreground\",\n            \"group-data-[expanded]:transform group-data-[expanded]:rotate-180\",\n            \"group-data-[disabled]:opacity-50\"\n          )}\n        />\n      </Button>\n    </Heading>\n  )\n}\n\nexport interface DisclosurePanelProps extends AriaDisclosurePanelProps {\n  children: React.ReactNode\n}\n\nfunction DisclosurePanel({\n  children,\n  className,\n  ...props\n}: DisclosurePanelProps) {\n  return (\n    <AriaDisclosurePanel\n      {...props}\n      className={\"overflow-hidden text-sm transition-all\"}\n    >\n      <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n    </AriaDisclosurePanel>\n  )\n}\n\nexport interface DisclosureGroupProps extends AriaDisclosureGroupProps {\n  children: React.ReactNode\n}\n\nfunction DisclosureGroup({\n  children,\n  className,\n  ...props\n}: DisclosureGroupProps) {\n  return (\n    <AriaDisclosureGroup\n      {...props}\n      className={composeRenderProps(className, (className, renderProps) =>\n        cn(\"\", className)\n      )}\n    >\n      {children}\n    </AriaDisclosureGroup>\n  )\n}\n\nexport { Disclosure, DisclosureHeader, DisclosurePanel, DisclosureGroup }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}