{"version":3,"sources":["../src/commands/add.ts","../src/utils/get-config.ts","../src/utils/resolve-import.ts","../src/utils/get-package-manager.ts","../src/utils/logger.ts","../src/utils/handle-error.ts","../src/utils/registry/index.ts","../src/utils/registry/schema.ts","../src/utils/transformers/index.ts","../src/utils/transformers/transform-css-vars.ts","../src/utils/transformers/transform-import.ts","../src/utils/transformers/transform-jsx.ts","../src/utils/transformers/transform-rsc.ts","../src/commands/diff.ts","../src/commands/init.ts","../src/utils/templates.ts","../src/index.ts","../src/utils/get-package-info.ts"],"sourcesContent":["import { existsSync, promises as fs } from \"fs\"\nimport path from \"path\"\nimport { getConfig } from \"@/src/utils/get-config\"\nimport { getPackageManager } from \"@/src/utils/get-package-manager\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { logger } from \"@/src/utils/logger\"\nimport {\n  fetchTree,\n  getItemTargetPath,\n  getRegistryBaseColor,\n  getRegistryIndex,\n  resolveTree,\n} from \"@/src/utils/registry\"\nimport { transform } from \"@/src/utils/transformers\"\nimport chalk from \"chalk\"\nimport { Command } from \"commander\"\nimport { execa } from \"execa\"\nimport ora from \"ora\"\nimport prompts from \"prompts\"\nimport * as z from \"zod\"\n\nconst addOptionsSchema = z.object({\n  components: z.array(z.string()).optional(),\n  yes: z.boolean(),\n  overwrite: z.boolean(),\n  cwd: z.string(),\n  all: z.boolean(),\n  path: z.string().optional(),\n})\n\nexport const add = new Command()\n  .name(\"add\")\n  .description(\"add a component to your project\")\n  .argument(\"[components...]\", \"the components to add\")\n  .option(\"-y, --yes\", \"skip confirmation prompt.\", true)\n  .option(\"-o, --overwrite\", \"overwrite existing files.\", false)\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .option(\"-a, --all\", \"add all available components\", false)\n  .option(\"-p, --path <path>\", \"the path to add the component to.\")\n  .action(async (components, opts) => {\n    try {\n      const options = addOptionsSchema.parse({\n        components,\n        ...opts,\n      })\n\n      const cwd = path.resolve(options.cwd)\n\n      if (!existsSync(cwd)) {\n        logger.error(`The path ${cwd} does not exist. Please try again.`)\n        process.exit(1)\n      }\n\n      const config = await getConfig(cwd)\n      if (!config) {\n        logger.warn(\n          `Configuration is missing. Please run ${chalk.green(\n            `init`\n          )} to create a components.json file.`\n        )\n        process.exit(1)\n      }\n\n      const registryIndex = await getRegistryIndex()\n\n      let selectedComponents = options.all\n        ? registryIndex.map((entry) => entry.name)\n        : options.components\n      if (!options.components?.length && !options.all) {\n        const { components } = await prompts({\n          type: \"multiselect\",\n          name: \"components\",\n          message: \"Which components would you like to add?\",\n          hint: \"Space to select. A to toggle all. Enter to submit.\",\n          instructions: false,\n          choices: registryIndex.map((entry) => ({\n            title: entry.name,\n            value: entry.name,\n            selected: options.all\n              ? true\n              : options.components?.includes(entry.name),\n          })),\n        })\n        selectedComponents = components\n      }\n\n      if (!selectedComponents?.length) {\n        logger.warn(\"No components selected. Exiting.\")\n        process.exit(0)\n      }\n\n      const tree = await resolveTree(registryIndex, selectedComponents)\n      const payload = await fetchTree(config.style, tree)\n      const baseColor = await getRegistryBaseColor(config.tailwind.baseColor)\n\n      if (!payload.length) {\n        logger.warn(\"Selected components not found. Exiting.\")\n        process.exit(0)\n      }\n\n      if (!options.yes) {\n        const { proceed } = await prompts({\n          type: \"confirm\",\n          name: \"proceed\",\n          message: `Ready to install components and dependencies. Proceed?`,\n          initial: true,\n        })\n\n        if (!proceed) {\n          process.exit(0)\n        }\n      }\n\n      const spinner = ora(`Installing components...`).start()\n      for (const item of payload) {\n        spinner.text = `Installing ${item.name}...`\n        const targetDir = await getItemTargetPath(\n          config,\n          item,\n          options.path ? path.resolve(cwd, options.path) : undefined\n        )\n\n        if (!targetDir) {\n          continue\n        }\n\n        if (!existsSync(targetDir)) {\n          await fs.mkdir(targetDir, { recursive: true })\n        }\n\n        const existingComponent = item.files.filter((file) =>\n          existsSync(path.resolve(targetDir, file.name))\n        )\n\n        if (existingComponent.length && !options.overwrite) {\n          if (selectedComponents.includes(item.name)) {\n            spinner.stop()\n            const { overwrite } = await prompts({\n              type: \"confirm\",\n              name: \"overwrite\",\n              message: `Component ${item.name} already exists. Would you like to overwrite?`,\n              initial: false,\n            })\n\n            if (!overwrite) {\n              logger.info(\n                `Skipped ${item.name}. To overwrite, run with the ${chalk.green(\n                  \"--overwrite\"\n                )} flag.`\n              )\n              continue\n            }\n\n            spinner.start(`Installing ${item.name}...`)\n          } else {\n            continue\n          }\n        }\n\n        for (const file of item.files) {\n          let filePath = path.resolve(targetDir, file.name)\n\n          // Run transformers.\n          const content = await transform({\n            filename: file.name,\n            raw: file.content,\n            config,\n            baseColor,\n          })\n\n          if (!config.tsx) {\n            filePath = filePath.replace(/\\.tsx$/, \".jsx\")\n            filePath = filePath.replace(/\\.ts$/, \".js\")\n          }\n\n          await fs.writeFile(filePath, content)\n        }\n\n        // Install dependencies.\n        if (item.dependencies?.length) {\n          const packageManager = await getPackageManager(cwd)\n          await execa(\n            packageManager,\n            [\n              packageManager === \"npm\" ? \"install\" : \"add\",\n              ...item.dependencies,\n            ],\n            {\n              cwd,\n            }\n          )\n        }\n      }\n      spinner.succeed(`Done.`)\n    } catch (error) {\n      handleError(error)\n    }\n  })\n","import path from \"path\"\nimport { resolveImport } from \"@/src/utils/resolve-import\"\nimport { cosmiconfig } from \"cosmiconfig\"\nimport { loadConfig } from \"tsconfig-paths\"\nimport * as z from \"zod\"\n\nexport const DEFAULT_STYLE = \"default\"\nexport const DEFAULT_COMPONENTS = \"@/components\"\nexport const DEFAULT_UTILS = \"@/lib/utils\"\nexport const DEFAULT_TAILWIND_CSS = \"app/globals.css\"\nexport const DEFAULT_TAILWIND_CONFIG = \"tailwind.config.js\"\nexport const DEFAULT_TAILWIND_BASE_COLOR = \"slate\"\n\n// TODO: Figure out if we want to support all cosmiconfig formats.\n// A simple components.json file would be nice.\nconst explorer = cosmiconfig(\"components\", {\n  searchPlaces: [\"components.json\"],\n})\n\nexport const rawConfigSchema = z\n  .object({\n    $schema: z.string().optional(),\n    style: z.string(),\n    rsc: z.coerce.boolean().default(false),\n    tsx: z.coerce.boolean().default(true),\n    tailwind: z.object({\n      config: z.string(),\n      css: z.string(),\n      baseColor: z.string(),\n      cssVariables: z.boolean().default(true),\n    }),\n    aliases: z.object({\n      components: z.string(),\n      utils: z.string(),\n    }),\n  })\n  .strict()\n\nexport type RawConfig = z.infer<typeof rawConfigSchema>\n\nexport const configSchema = rawConfigSchema.extend({\n  resolvedPaths: z.object({\n    tailwindConfig: z.string(),\n    tailwindCss: z.string(),\n    utils: z.string(),\n    components: z.string(),\n  }),\n})\n\nexport type Config = z.infer<typeof configSchema>\n\nexport async function getConfig(cwd: string) {\n  const config = await getRawConfig(cwd)\n\n  if (!config) {\n    return null\n  }\n\n  return await resolveConfigPaths(cwd, config)\n}\n\nexport async function resolveConfigPaths(cwd: string, config: RawConfig) {\n  // Read tsconfig.json.\n  const tsConfig = await loadConfig(cwd)\n\n  if (tsConfig.resultType === \"failed\") {\n    throw new Error(\n      `Failed to load ${config.tsx ? \"tsconfig\" : \"jsconfig\"}.json. ${\n        tsConfig.message ?? \"\"\n      }`.trim()\n    )\n  }\n\n  return configSchema.parse({\n    ...config,\n    resolvedPaths: {\n      tailwindConfig: path.resolve(cwd, config.tailwind.config),\n      tailwindCss: path.resolve(cwd, config.tailwind.css),\n      utils: await resolveImport(config.aliases[\"utils\"], tsConfig),\n      components: await resolveImport(config.aliases[\"components\"], tsConfig),\n    },\n  })\n}\n\nexport async function getRawConfig(cwd: string): Promise<RawConfig | null> {\n  try {\n    const configResult = await explorer.search(cwd)\n\n    if (!configResult) {\n      return null\n    }\n\n    return rawConfigSchema.parse(configResult.config)\n  } catch (error) {\n    throw new Error(`Invalid configuration found in ${cwd}/components.json.`)\n  }\n}\n","import { createMatchPath, type ConfigLoaderSuccessResult } from \"tsconfig-paths\"\n\nexport async function resolveImport(\n  importPath: string,\n  config: Pick<ConfigLoaderSuccessResult, \"absoluteBaseUrl\" | \"paths\">\n) {\n  return createMatchPath(config.absoluteBaseUrl, config.paths)(\n    importPath,\n    undefined,\n    () => true,\n    [\".ts\", \".tsx\"]\n  )\n}\n","import { detect } from \"@antfu/ni\"\n\nexport async function getPackageManager(\n  targetDir: string\n): Promise<\"yarn\" | \"pnpm\" | \"bun\" | \"npm\"> {\n  const packageManager = await detect({ programmatic: true, cwd: targetDir })\n\n  if (packageManager === \"yarn@berry\") return \"yarn\"\n  if (packageManager === \"pnpm@6\") return \"pnpm\"\n  if (packageManager === \"bun\") return \"bun\"\n\n  return packageManager ?? \"npm\"\n}\n","import chalk from \"chalk\"\n\nexport const logger = {\n  error(...args: unknown[]) {\n    console.log(chalk.red(...args))\n  },\n  warn(...args: unknown[]) {\n    console.log(chalk.yellow(...args))\n  },\n  info(...args: unknown[]) {\n    console.log(chalk.cyan(...args))\n  },\n  success(...args: unknown[]) {\n    console.log(chalk.green(...args))\n  },\n  break() {\n    console.log(\"\")\n  },\n}\n","import { logger } from \"@/src/utils/logger\"\n\nexport function handleError(error: unknown) {\n  if (typeof error === \"string\") {\n    logger.error(error)\n    process.exit(1)\n  }\n\n  if (error instanceof Error) {\n    logger.error(error.message)\n    process.exit(1)\n  }\n\n  logger.error(\"Something went wrong. Please try again.\")\n  process.exit(1)\n}\n","import path from \"path\"\nimport { Config } from \"@/src/utils/get-config\"\nimport {\n  registryBaseColorSchema,\n  registryIndexSchema,\n  registryItemWithContentSchema,\n  registryWithContentSchema,\n  stylesSchema,\n} from \"@/src/utils/registry/schema\"\nimport { HttpsProxyAgent } from \"https-proxy-agent\"\nimport fetch from \"node-fetch\"\nimport * as z from \"zod\"\n\nconst baseUrl = process.env.COMPONENTS_REGISTRY_URL ?? \"https://ui.shadcn.com\"\nconst agent = process.env.https_proxy\n  ? new HttpsProxyAgent(process.env.https_proxy)\n  : undefined\n\nexport async function getRegistryIndex() {\n  try {\n    const [result] = await fetchRegistry([\"index.json\"])\n\n    return registryIndexSchema.parse(result)\n  } catch (error) {\n    throw new Error(`Failed to fetch components from registry.`)\n  }\n}\n\nexport async function getRegistryStyles() {\n  try {\n    const [result] = await fetchRegistry([\"styles/index.json\"])\n\n    return stylesSchema.parse(result)\n  } catch (error) {\n    throw new Error(`Failed to fetch styles from registry.`)\n  }\n}\n\nexport async function getRegistryBaseColors() {\n  return [\n    {\n      name: \"slate\",\n      label: \"Slate\",\n    },\n    {\n      name: \"gray\",\n      label: \"Gray\",\n    },\n    {\n      name: \"zinc\",\n      label: \"Zinc\",\n    },\n    {\n      name: \"neutral\",\n      label: \"Neutral\",\n    },\n    {\n      name: \"stone\",\n      label: \"Stone\",\n    },\n  ]\n}\n\nexport async function getRegistryBaseColor(baseColor: string) {\n  try {\n    const [result] = await fetchRegistry([`colors/${baseColor}.json`])\n\n    return registryBaseColorSchema.parse(result)\n  } catch (error) {\n    throw new Error(`Failed to fetch base color from registry.`)\n  }\n}\n\nexport async function resolveTree(\n  index: z.infer<typeof registryIndexSchema>,\n  names: string[]\n) {\n  const tree: z.infer<typeof registryIndexSchema> = []\n\n  for (const name of names) {\n    const entry = index.find((entry) => entry.name === name)\n\n    if (!entry) {\n      continue\n    }\n\n    tree.push(entry)\n\n    if (entry.registryDependencies) {\n      const dependencies = await resolveTree(index, entry.registryDependencies)\n      tree.push(...dependencies)\n    }\n  }\n\n  return tree.filter(\n    (component, index, self) =>\n      self.findIndex((c) => c.name === component.name) === index\n  )\n}\n\nexport async function fetchTree(\n  style: string,\n  tree: z.infer<typeof registryIndexSchema>\n) {\n  try {\n    const paths = tree.map((item) => `styles/${style}/${item.name}.json`)\n    const result = await fetchRegistry(paths)\n\n    return registryWithContentSchema.parse(result)\n  } catch (error) {\n    throw new Error(`Failed to fetch tree from registry.`)\n  }\n}\n\nexport async function getItemTargetPath(\n  config: Config,\n  item: Pick<z.infer<typeof registryItemWithContentSchema>, \"type\">,\n  override?: string\n) {\n  // Allow overrides for all items but ui.\n  if (override && item.type !== \"components:ui\") {\n    return override\n  }\n\n  const [parent, type] = item.type.split(\":\")\n  if (!(parent in config.resolvedPaths)) {\n    return null\n  }\n\n  return path.join(\n    config.resolvedPaths[parent as keyof typeof config.resolvedPaths],\n    type\n  )\n}\n\nasync function fetchRegistry(paths: string[]) {\n  try {\n    const results = await Promise.all(\n      paths.map(async (path) => {\n        const response = await fetch(`${baseUrl}/registry/${path}`, {\n          agent,\n        })\n        return await response.json()\n      })\n    )\n\n    return results\n  } catch (error) {\n    console.log(error)\n    throw new Error(`Failed to fetch registry from ${baseUrl}.`)\n  }\n}\n","import * as z from \"zod\"\n\n// TODO: Extract this to a shared package.\nexport const registryItemSchema = z.object({\n  name: z.string(),\n  dependencies: z.array(z.string()).optional(),\n  registryDependencies: z.array(z.string()).optional(),\n  files: z.array(z.string()),\n  type: z.enum([\"components:ui\", \"components:component\", \"components:example\"]),\n})\n\nexport const registryIndexSchema = z.array(registryItemSchema)\n\nexport const registryItemWithContentSchema = registryItemSchema.extend({\n  files: z.array(\n    z.object({\n      name: z.string(),\n      content: z.string(),\n    })\n  ),\n})\n\nexport const registryWithContentSchema = z.array(registryItemWithContentSchema)\n\nexport const stylesSchema = z.array(\n  z.object({\n    name: z.string(),\n    label: z.string(),\n  })\n)\n\nexport const registryBaseColorSchema = z.object({\n  inlineColors: z.object({\n    light: z.record(z.string(), z.string()),\n    dark: z.record(z.string(), z.string()),\n  }),\n  cssVars: z.object({\n    light: z.record(z.string(), z.string()),\n    dark: z.record(z.string(), z.string()),\n  }),\n  inlineColorsTemplate: z.string(),\n  cssVarsTemplate: z.string(),\n})\n","import { promises as fs } from \"fs\"\nimport { tmpdir } from \"os\"\nimport path from \"path\"\nimport { Config } from \"@/src/utils/get-config\"\nimport { registryBaseColorSchema } from \"@/src/utils/registry/schema\"\nimport { transformCssVars } from \"@/src/utils/transformers/transform-css-vars\"\nimport { transformImport } from \"@/src/utils/transformers/transform-import\"\nimport { transformJsx } from \"@/src/utils/transformers/transform-jsx\"\nimport { transformRsc } from \"@/src/utils/transformers/transform-rsc\"\nimport { Project, ScriptKind, type SourceFile } from \"ts-morph\"\nimport * as z from \"zod\"\n\nexport type TransformOpts = {\n  filename: string\n  raw: string\n  config: Config\n  baseColor?: z.infer<typeof registryBaseColorSchema>\n}\n\nexport type Transformer<Output = SourceFile> = (\n  opts: TransformOpts & {\n    sourceFile: SourceFile\n  }\n) => Promise<Output>\n\nconst transformers: Transformer[] = [\n  transformImport,\n  transformRsc,\n  transformCssVars,\n]\n\nconst project = new Project({\n  compilerOptions: {},\n})\n\nasync function createTempSourceFile(filename: string) {\n  const dir = await fs.mkdtemp(path.join(tmpdir(), \"shadcn-\"))\n  return path.join(dir, filename)\n}\n\nexport async function transform(opts: TransformOpts) {\n  const tempFile = await createTempSourceFile(opts.filename)\n  const sourceFile = project.createSourceFile(tempFile, opts.raw, {\n    scriptKind: ScriptKind.TSX,\n  })\n\n  for (const transformer of transformers) {\n    transformer({ sourceFile, ...opts })\n  }\n\n  return await transformJsx({\n    sourceFile,\n    ...opts,\n  })\n}\n","import { registryBaseColorSchema } from \"@/src/utils/registry/schema\"\nimport { Transformer } from \"@/src/utils/transformers\"\nimport { ScriptKind, SyntaxKind } from \"ts-morph\"\nimport * as z from \"zod\"\n\nexport const transformCssVars: Transformer = async ({\n  sourceFile,\n  config,\n  baseColor,\n}) => {\n  // No transform if using css variables.\n  if (config.tailwind?.cssVariables || !baseColor?.inlineColors) {\n    return sourceFile\n  }\n\n  // Find jsx attributes with the name className.\n  // const openingElements = sourceFile.getDescendantsOfKind(SyntaxKind.JsxElement)\n  // console.log(openingElements)\n  // const jsxAttributes = sourceFile\n  //   .getDescendantsOfKind(SyntaxKind.JsxAttribute)\n  //   .filter((node) => node.getName() === \"className\")\n\n  // for (const jsxAttribute of jsxAttributes) {\n  //   const value = jsxAttribute.getInitializer()?.getText()\n  //   if (value) {\n  //     const valueWithColorMapping = applyColorMapping(\n  //       value.replace(/\"/g, \"\"),\n  //       baseColor.inlineColors\n  //     )\n  //     jsxAttribute.setInitializer(`\"${valueWithColorMapping}\"`)\n  //   }\n  // }\n  sourceFile.getDescendantsOfKind(SyntaxKind.StringLiteral).forEach((node) => {\n    const value = node.getText()\n    if (value) {\n      const valueWithColorMapping = applyColorMapping(\n        value.replace(/\"/g, \"\"),\n        baseColor.inlineColors\n      )\n      node.replaceWithText(`\"${valueWithColorMapping.trim()}\"`)\n    }\n  })\n\n  return sourceFile\n}\n\n// export default function transformer(file: FileInfo, api: API) {\n//   const j = api.jscodeshift.withParser(\"tsx\")\n\n//   // Replace bg-background with \"bg-white dark:bg-slate-950\"\n//   const $j = j(file.source)\n//   return $j\n//     .find(j.JSXAttribute, {\n//       name: {\n//         name: \"className\",\n//       },\n//     })\n//     .forEach((path) => {\n//       const { node } = path\n//       if (node?.value?.type) {\n//         if (node.value.type === \"StringLiteral\") {\n//           node.value.value = applyColorMapping(node.value.value)\n//           console.log(node.value.value)\n//         }\n\n//         if (\n//           node.value.type === \"JSXExpressionContainer\" &&\n//           node.value.expression.type === \"CallExpression\"\n//         ) {\n//           const callee = node.value.expression.callee\n//           if (callee.type === \"Identifier\" && callee.name === \"cn\") {\n//             node.value.expression.arguments.forEach((arg) => {\n//               if (arg.type === \"StringLiteral\") {\n//                 arg.value = applyColorMapping(arg.value)\n//               }\n\n//               if (\n//                 arg.type === \"LogicalExpression\" &&\n//                 arg.right.type === \"StringLiteral\"\n//               ) {\n//                 arg.right.value = applyColorMapping(arg.right.value)\n//               }\n//             })\n//           }\n//         }\n//       }\n//     })\n//     .toSource()\n// }\n\n// // export function splitClassName(input: string): (string | null)[] {\n// //   const parts = input.split(\":\")\n// //   const classNames = parts.map((part) => {\n// //     const match = part.match(/^\\[?(.+)\\]$/)\n// //     if (match) {\n// //       return match[1]\n// //     } else {\n// //       return null\n// //     }\n// //   })\n\n// //   return classNames\n// // }\n\n// Splits a className into variant-name-alpha.\n// eg. hover:bg-primary-100 -> [hover, bg-primary, 100]\nexport function splitClassName(className: string): (string | null)[] {\n  if (!className.includes(\"/\") && !className.includes(\":\")) {\n    return [null, className, null]\n  }\n\n  const parts: (string | null)[] = []\n  // First we split to find the alpha.\n  let [rest, alpha] = className.split(\"/\")\n\n  // Check if rest has a colon.\n  if (!rest.includes(\":\")) {\n    return [null, rest, alpha]\n  }\n\n  // Next we split the rest by the colon.\n  const split = rest.split(\":\")\n\n  // We take the last item from the split as the name.\n  const name = split.pop()\n\n  // We glue back the rest of the split.\n  const variant = split.join(\":\")\n\n  // Finally we push the variant, name and alpha.\n  parts.push(variant ?? null, name ?? null, alpha ?? null)\n\n  return parts\n}\n\nconst PREFIXES = [\"bg-\", \"text-\", \"border-\", \"ring-offset-\", \"ring-\"]\n\nexport function applyColorMapping(\n  input: string,\n  mapping: z.infer<typeof registryBaseColorSchema>[\"inlineColors\"]\n) {\n  // Handle border classes.\n  if (input.includes(\" border \")) {\n    input = input.replace(\" border \", \" border border-border \")\n  }\n\n  // Build color mappings.\n  const classNames = input.split(\" \")\n  const lightMode = new Set<string>()\n  const darkMode = new Set<string>()\n  for (let className of classNames) {\n    const [variant, value, modifier] = splitClassName(className)\n    const prefix = PREFIXES.find((prefix) => value?.startsWith(prefix))\n    if (!prefix) {\n      if (!lightMode.has(className)) {\n        lightMode.add(className)\n      }\n      continue\n    }\n\n    const needle = value?.replace(prefix, \"\")\n    if (needle && needle in mapping.light) {\n      lightMode.add(\n        [variant, `${prefix}${mapping.light[needle]}`]\n          .filter(Boolean)\n          .join(\":\") + (modifier ? `/${modifier}` : \"\")\n      )\n\n      darkMode.add(\n        [\"dark\", variant, `${prefix}${mapping.dark[needle]}`]\n          .filter(Boolean)\n          .join(\":\") + (modifier ? `/${modifier}` : \"\")\n      )\n      continue\n    }\n\n    if (!lightMode.has(className)) {\n      lightMode.add(className)\n    }\n  }\n\n  return [...Array.from(lightMode), ...Array.from(darkMode)].join(\" \").trim()\n}\n","import { Transformer } from \"@/src/utils/transformers\"\n\nexport const transformImport: Transformer = async ({ sourceFile, config }) => {\n  const importDeclarations = sourceFile.getImportDeclarations()\n\n  for (const importDeclaration of importDeclarations) {\n    const moduleSpecifier = importDeclaration.getModuleSpecifierValue()\n\n    // Replace @/registry/[style] with the components alias.\n    if (moduleSpecifier.startsWith(\"@/registry/\")) {\n      importDeclaration.setModuleSpecifier(\n        moduleSpecifier.replace(\n          /^@\\/registry\\/[^/]+/,\n          config.aliases.components\n        )\n      )\n    }\n\n    // Replace `import { cn } from \"@/lib/utils\"`\n    if (moduleSpecifier == \"@/lib/utils\") {\n      const namedImports = importDeclaration.getNamedImports()\n      const cnImport = namedImports.find((i) => i.getName() === \"cn\")\n      if (cnImport) {\n        importDeclaration.setModuleSpecifier(\n          moduleSpecifier.replace(/^@\\/lib\\/utils/, config.aliases.utils)\n        )\n      }\n    }\n  }\n\n  return sourceFile\n}\n","import { type Transformer } from \"@/src/utils/transformers\"\nimport { transformFromAstSync } from \"@babel/core\"\nimport { ParserOptions, parse } from \"@babel/parser\"\n// @ts-ignore\nimport transformTypescript from \"@babel/plugin-transform-typescript\"\nimport * as recast from \"recast\"\n\n// TODO.\n// I'm using recast for the AST here.\n// Figure out if ts-morph AST is compatible with Babel.\n\n// This is a copy of the babel options from recast/parser.\n// The goal here is to tolerate as much syntax as possible.\n// We want to be able to parse any valid tsx code.\n// See https://github.com/benjamn/recast/blob/master/parsers/_babel_options.ts.\nconst PARSE_OPTIONS: ParserOptions = {\n  sourceType: \"module\",\n  allowImportExportEverywhere: true,\n  allowReturnOutsideFunction: true,\n  startLine: 1,\n  tokens: true,\n  plugins: [\n    \"asyncGenerators\",\n    \"bigInt\",\n    \"classPrivateMethods\",\n    \"classPrivateProperties\",\n    \"classProperties\",\n    \"classStaticBlock\",\n    \"decimal\",\n    \"decorators-legacy\",\n    \"doExpressions\",\n    \"dynamicImport\",\n    \"exportDefaultFrom\",\n    \"exportNamespaceFrom\",\n    \"functionBind\",\n    \"functionSent\",\n    \"importAssertions\",\n    \"importMeta\",\n    \"nullishCoalescingOperator\",\n    \"numericSeparator\",\n    \"objectRestSpread\",\n    \"optionalCatchBinding\",\n    \"optionalChaining\",\n    [\n      \"pipelineOperator\",\n      {\n        proposal: \"minimal\",\n      },\n    ],\n    [\n      \"recordAndTuple\",\n      {\n        syntaxType: \"hash\",\n      },\n    ],\n    \"throwExpressions\",\n    \"topLevelAwait\",\n    \"v8intrinsic\",\n    \"typescript\",\n    \"jsx\",\n  ],\n}\n\nexport const transformJsx: Transformer<String> = async ({\n  sourceFile,\n  config,\n}) => {\n  const output = sourceFile.getFullText()\n\n  if (config.tsx) {\n    return output\n  }\n\n  const ast = recast.parse(output, {\n    parser: {\n      parse: (code: string) => {\n        return parse(code, PARSE_OPTIONS)\n      },\n    },\n  })\n\n  const result = transformFromAstSync(ast, output, {\n    cloneInputAst: false,\n    code: false,\n    ast: true,\n    plugins: [transformTypescript],\n    configFile: false,\n  })\n\n  if (!result || !result.ast) {\n    throw new Error(\"Failed to transform JSX\")\n  }\n\n  return recast.print(result.ast).code\n}\n","import { Transformer } from \"@/src/utils/transformers\"\nimport { SyntaxKind } from \"ts-morph\"\n\nexport const transformRsc: Transformer = async ({ sourceFile, config }) => {\n  if (config.rsc) {\n    return sourceFile\n  }\n\n  // Remove \"use client\" from the top of the file.\n  const first = sourceFile.getFirstChildByKind(SyntaxKind.ExpressionStatement)\n  if (first?.getText() === `\"use client\"`) {\n    first.remove()\n  }\n\n  return sourceFile\n}\n","import { existsSync, promises as fs } from \"fs\"\nimport path from \"path\"\nimport { Config, getConfig } from \"@/src/utils/get-config\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { logger } from \"@/src/utils/logger\"\nimport {\n  fetchTree,\n  getItemTargetPath,\n  getRegistryBaseColor,\n  getRegistryIndex,\n} from \"@/src/utils/registry\"\nimport { registryIndexSchema } from \"@/src/utils/registry/schema\"\nimport { transform } from \"@/src/utils/transformers\"\nimport chalk from \"chalk\"\nimport { Command } from \"commander\"\nimport { diffLines, type Change } from \"diff\"\nimport * as z from \"zod\"\n\nconst updateOptionsSchema = z.object({\n  component: z.string().optional(),\n  yes: z.boolean(),\n  cwd: z.string(),\n  path: z.string().optional(),\n})\n\nexport const diff = new Command()\n  .name(\"diff\")\n  .description(\"check for updates against the registry\")\n  .argument(\"[component]\", \"the component name\")\n  .option(\"-y, --yes\", \"skip confirmation prompt.\", false)\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .action(async (name, opts) => {\n    try {\n      const options = updateOptionsSchema.parse({\n        component: name,\n        ...opts,\n      })\n\n      const cwd = path.resolve(options.cwd)\n\n      if (!existsSync(cwd)) {\n        logger.error(`The path ${cwd} does not exist. Please try again.`)\n        process.exit(1)\n      }\n\n      const config = await getConfig(cwd)\n      if (!config) {\n        logger.warn(\n          `Configuration is missing. Please run ${chalk.green(\n            `init`\n          )} to create a components.json file.`\n        )\n        process.exit(1)\n      }\n\n      const registryIndex = await getRegistryIndex()\n\n      if (!options.component) {\n        const targetDir = config.resolvedPaths.components\n\n        // Find all components that exist in the project.\n        const projectComponents = registryIndex.filter((item) => {\n          for (const file of item.files) {\n            const filePath = path.resolve(targetDir, file)\n            if (existsSync(filePath)) {\n              return true\n            }\n          }\n\n          return false\n        })\n\n        // Check for updates.\n        const componentsWithUpdates = []\n        for (const component of projectComponents) {\n          const changes = await diffComponent(component, config)\n          if (changes.length) {\n            componentsWithUpdates.push({\n              name: component.name,\n              changes,\n            })\n          }\n        }\n\n        if (!componentsWithUpdates.length) {\n          logger.info(\"No updates found.\")\n          process.exit(0)\n        }\n\n        logger.info(\"The following components have updates available:\")\n        for (const component of componentsWithUpdates) {\n          logger.info(`- ${component.name}`)\n          for (const change of component.changes) {\n            logger.info(`  - ${change.filePath}`)\n          }\n        }\n        logger.break()\n        logger.info(\n          `Run ${chalk.green(`diff <component>`)} to see the changes.`\n        )\n        process.exit(0)\n      }\n\n      // Show diff for a single component.\n      const component = registryIndex.find(\n        (item) => item.name === options.component\n      )\n\n      if (!component) {\n        logger.error(\n          `The component ${chalk.green(options.component)} does not exist.`\n        )\n        process.exit(1)\n      }\n\n      const changes = await diffComponent(component, config)\n\n      if (!changes.length) {\n        logger.info(`No updates found for ${options.component}.`)\n        process.exit(0)\n      }\n\n      for (const change of changes) {\n        logger.info(`- ${change.filePath}`)\n        await printDiff(change.patch)\n        logger.info(\"\")\n      }\n    } catch (error) {\n      handleError(error)\n    }\n  })\n\nasync function diffComponent(\n  component: z.infer<typeof registryIndexSchema>[number],\n  config: Config\n) {\n  const payload = await fetchTree(config.style, [component])\n  const baseColor = await getRegistryBaseColor(config.tailwind.baseColor)\n\n  const changes = []\n\n  for (const item of payload) {\n    const targetDir = await getItemTargetPath(config, item)\n\n    if (!targetDir) {\n      continue\n    }\n\n    for (const file of item.files) {\n      const filePath = path.resolve(targetDir, file.name)\n\n      if (!existsSync(filePath)) {\n        continue\n      }\n\n      const fileContent = await fs.readFile(filePath, \"utf8\")\n\n      const registryContent = await transform({\n        filename: file.name,\n        raw: file.content,\n        config,\n        baseColor,\n      })\n\n      const patch = diffLines(registryContent as string, fileContent)\n      if (patch.length > 1) {\n        changes.push({\n          file: file.name,\n          filePath,\n          patch,\n        })\n      }\n    }\n  }\n\n  return changes\n}\n\nasync function printDiff(diff: Change[]) {\n  diff.forEach((part) => {\n    if (part) {\n      if (part.added) {\n        return process.stdout.write(chalk.green(part.value))\n      }\n      if (part.removed) {\n        return process.stdout.write(chalk.red(part.value))\n      }\n\n      return process.stdout.write(part.value)\n    }\n  })\n}\n","import { existsSync, promises as fs } from \"fs\"\nimport path from \"path\"\nimport {\n  DEFAULT_COMPONENTS,\n  DEFAULT_TAILWIND_CONFIG,\n  DEFAULT_TAILWIND_CSS,\n  DEFAULT_UTILS,\n  getConfig,\n  rawConfigSchema,\n  resolveConfigPaths,\n  type Config,\n} from \"@/src/utils/get-config\"\nimport { getPackageManager } from \"@/src/utils/get-package-manager\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { logger } from \"@/src/utils/logger\"\nimport {\n  getRegistryBaseColor,\n  getRegistryBaseColors,\n  getRegistryStyles,\n} from \"@/src/utils/registry\"\nimport * as templates from \"@/src/utils/templates\"\nimport chalk from \"chalk\"\nimport { Command } from \"commander\"\nimport { execa } from \"execa\"\nimport template from \"lodash.template\"\nimport ora from \"ora\"\nimport prompts from \"prompts\"\nimport * as z from \"zod\"\n\nconst PROJECT_DEPENDENCIES = [\n  \"tailwindcss-animate\",\n  \"class-variance-authority\",\n  \"clsx\",\n  \"tailwind-merge\",\n]\n\nconst initOptionsSchema = z.object({\n  cwd: z.string(),\n  yes: z.boolean(),\n})\n\nexport const init = new Command()\n  .name(\"init\")\n  .description(\"initialize your project and install dependencies\")\n  .option(\"-y, --yes\", \"skip confirmation prompt.\", false)\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .action(async (opts) => {\n    try {\n      const options = initOptionsSchema.parse(opts)\n      const cwd = path.resolve(options.cwd)\n\n      // Ensure target directory exists.\n      if (!existsSync(cwd)) {\n        logger.error(`The path ${cwd} does not exist. Please try again.`)\n        process.exit(1)\n      }\n\n      // Read config.\n      const existingConfig = await getConfig(cwd)\n      const config = await promptForConfig(cwd, existingConfig, options.yes)\n\n      await runInit(cwd, config)\n\n      logger.info(\"\")\n      logger.info(\n        `${chalk.green(\"Success!\")} Project initialization completed.`\n      )\n      logger.info(\"\")\n    } catch (error) {\n      handleError(error)\n    }\n  })\n\nexport async function promptForConfig(\n  cwd: string,\n  defaultConfig: Config | null = null,\n  skip = false\n) {\n  const highlight = (text: string) => chalk.cyan(text)\n\n  const styles = await getRegistryStyles()\n  const baseColors = await getRegistryBaseColors()\n\n  const options = await prompts([\n    {\n      type: \"toggle\",\n      name: \"typescript\",\n      message: `Would you like to use ${highlight(\n        \"TypeScript\"\n      )} (recommended)?`,\n      initial: defaultConfig?.tsx ?? true,\n      active: \"yes\",\n      inactive: \"no\",\n    },\n    {\n      type: \"select\",\n      name: \"style\",\n      message: `Which ${highlight(\"style\")} would you like to use?`,\n      choices: styles.map((style) => ({\n        title: style.label,\n        value: style.name,\n      })),\n    },\n    {\n      type: \"select\",\n      name: \"tailwindBaseColor\",\n      message: `Which color would you like to use as ${highlight(\n        \"base color\"\n      )}?`,\n      choices: baseColors.map((color) => ({\n        title: color.label,\n        value: color.name,\n      })),\n    },\n    {\n      type: \"text\",\n      name: \"tailwindCss\",\n      message: `Where is your ${highlight(\"global CSS\")} file?`,\n      initial: defaultConfig?.tailwind.css ?? DEFAULT_TAILWIND_CSS,\n    },\n    {\n      type: \"toggle\",\n      name: \"tailwindCssVariables\",\n      message: `Would you like to use ${highlight(\n        \"CSS variables\"\n      )} for colors?`,\n      initial: defaultConfig?.tailwind.cssVariables ?? true,\n      active: \"yes\",\n      inactive: \"no\",\n    },\n    {\n      type: \"text\",\n      name: \"tailwindConfig\",\n      message: `Where is your ${highlight(\"tailwind.config.js\")} located?`,\n      initial: defaultConfig?.tailwind.config ?? DEFAULT_TAILWIND_CONFIG,\n    },\n    {\n      type: \"text\",\n      name: \"components\",\n      message: `Configure the import alias for ${highlight(\"components\")}:`,\n      initial: defaultConfig?.aliases[\"components\"] ?? DEFAULT_COMPONENTS,\n    },\n    {\n      type: \"text\",\n      name: \"utils\",\n      message: `Configure the import alias for ${highlight(\"utils\")}:`,\n      initial: defaultConfig?.aliases[\"utils\"] ?? DEFAULT_UTILS,\n    },\n    {\n      type: \"toggle\",\n      name: \"rsc\",\n      message: `Are you using ${highlight(\"React Server Components\")}?`,\n      initial: defaultConfig?.rsc ?? true,\n      active: \"yes\",\n      inactive: \"no\",\n    },\n  ])\n\n  const config = rawConfigSchema.parse({\n    $schema: \"https://ui.shadcn.com/schema.json\",\n    style: options.style,\n    tailwind: {\n      config: options.tailwindConfig,\n      css: options.tailwindCss,\n      baseColor: options.tailwindBaseColor,\n      cssVariables: options.tailwindCssVariables,\n    },\n    rsc: options.rsc,\n    tsx: options.typescript,\n    aliases: {\n      utils: options.utils,\n      components: options.components,\n    },\n  })\n\n  if (!skip) {\n    const { proceed } = await prompts({\n      type: \"confirm\",\n      name: \"proceed\",\n      message: `Write configuration to ${highlight(\n        \"components.json\"\n      )}. Proceed?`,\n      initial: true,\n    })\n\n    if (!proceed) {\n      process.exit(0)\n    }\n  }\n\n  // Write to file.\n  logger.info(\"\")\n  const spinner = ora(`Writing components.json...`).start()\n  const targetPath = path.resolve(cwd, \"components.json\")\n  await fs.writeFile(targetPath, JSON.stringify(config, null, 2), \"utf8\")\n  spinner.succeed()\n\n  return await resolveConfigPaths(cwd, config)\n}\n\nexport async function runInit(cwd: string, config: Config) {\n  const spinner = ora(`Initializing project...`)?.start()\n\n  // Ensure all resolved paths directories exist.\n  for (const [key, resolvedPath] of Object.entries(config.resolvedPaths)) {\n    // Determine if the path is a file or directory.\n    // TODO: is there a better way to do this?\n    let dirname = path.extname(resolvedPath)\n      ? path.dirname(resolvedPath)\n      : resolvedPath\n\n    // If the utils alias is set to something like \"@/lib/utils\",\n    // assume this is a file and remove the \"utils\" file name.\n    // TODO: In future releases we should add support for individual utils.\n    if (key === \"utils\" && resolvedPath.endsWith(\"/utils\")) {\n      // Remove /utils at the end.\n      dirname = dirname.replace(/\\/utils$/, \"\")\n    }\n\n    if (!existsSync(dirname)) {\n      await fs.mkdir(dirname, { recursive: true })\n    }\n  }\n\n  const extension = config.tsx ? \"ts\" : \"js\"\n\n  const tailwindConfigExtension = path.extname(\n    config.resolvedPaths.tailwindConfig\n  )\n\n  let tailwindConfigTemplate: string\n  if (tailwindConfigExtension === \".ts\") {\n    tailwindConfigTemplate = config.tailwind.cssVariables\n      ? templates.TAILWIND_CONFIG_TS_WITH_VARIABLES\n      : templates.TAILWIND_CONFIG_TS\n  } else {\n    tailwindConfigTemplate = config.tailwind.cssVariables\n      ? templates.TAILWIND_CONFIG_WITH_VARIABLES\n      : templates.TAILWIND_CONFIG\n  }\n\n  // Write tailwind config.\n  await fs.writeFile(\n    config.resolvedPaths.tailwindConfig,\n    template(tailwindConfigTemplate)({ extension }),\n    \"utf8\"\n  )\n\n  // Write css file.\n  const baseColor = await getRegistryBaseColor(config.tailwind.baseColor)\n  if (baseColor) {\n    await fs.writeFile(\n      config.resolvedPaths.tailwindCss,\n      config.tailwind.cssVariables\n        ? baseColor.cssVarsTemplate\n        : baseColor.inlineColorsTemplate,\n      \"utf8\"\n    )\n  }\n\n  // Write cn file.\n  await fs.writeFile(\n    `${config.resolvedPaths.utils}.${extension}`,\n    extension === \"ts\" ? templates.UTILS : templates.UTILS_JS,\n    \"utf8\"\n  )\n\n  spinner?.succeed()\n\n  // Install dependencies.\n  const dependenciesSpinner = ora(`Installing dependencies...`)?.start()\n  const packageManager = await getPackageManager(cwd)\n\n  // TODO: add support for other icon libraries.\n  const deps = [\n    ...PROJECT_DEPENDENCIES,\n    config.style === \"new-york\" ? \"@radix-ui/react-icons\" : \"lucide-react\",\n  ]\n\n  await execa(\n    packageManager,\n    [packageManager === \"npm\" ? \"install\" : \"add\", ...deps],\n    {\n      cwd,\n    }\n  )\n  dependenciesSpinner?.succeed()\n}\n","export const UTILS = `import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n`\n\nexport const UTILS_JS = `import { clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs))\n}\n`\n\nexport const TAILWIND_CONFIG = `/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: [\"class\"],\n  content: [\n    './pages/**/*.{<%- extension %>,<%- extension %>x}',\n    './components/**/*.{<%- extension %>,<%- extension %>x}',\n    './app/**/*.{<%- extension %>,<%- extension %>x}',\n    './src/**/*.{<%- extension %>,<%- extension %>x}',\n  ],\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}`\n\nexport const TAILWIND_CONFIG_WITH_VARIABLES = `/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: [\"class\"],\n  content: [\n    './pages/**/*.{<%- extension %>,<%- extension %>x}',\n    './components/**/*.{<%- extension %>,<%- extension %>x}',\n    './app/**/*.{<%- extension %>,<%- extension %>x}',\n    './src/**/*.{<%- extension %>,<%- extension %>x}',\n  ],\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}`\n\nexport const TAILWIND_CONFIG_TS = `import type { Config } from \"tailwindcss\"\n\nconst config = {\n  darkMode: [\"class\"],\n  content: [\n    './pages/**/*.{<%- extension %>,<%- extension %>x}',\n    './components/**/*.{<%- extension %>,<%- extension %>x}',\n    './app/**/*.{<%- extension %>,<%- extension %>x}',\n    './src/**/*.{<%- extension %>,<%- extension %>x}',\n  ],\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n} satisfies Config\n\nexport default config`\n\nexport const TAILWIND_CONFIG_TS_WITH_VARIABLES = `import type { Config } from \"tailwindcss\"\n\nconst config = {\n  darkMode: [\"class\"],\n  content: [\n    './pages/**/*.{<%- extension %>,<%- extension %>x}',\n    './components/**/*.{<%- extension %>,<%- extension %>x}',\n    './app/**/*.{<%- extension %>,<%- extension %>x}',\n    './src/**/*.{<%- extension %>,<%- extension %>x}',\n\t],\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n} satisfies Config\n\nexport default config`\n","#!/usr/bin/env node\nimport { add } from \"@/src/commands/add\"\nimport { diff } from \"@/src/commands/diff\"\nimport { init } from \"@/src/commands/init\"\nimport { Command } from \"commander\"\n\nimport { getPackageInfo } from \"./utils/get-package-info\"\n\nprocess.on(\"SIGINT\", () => process.exit(0))\nprocess.on(\"SIGTERM\", () => process.exit(0))\n\nasync function main() {\n  const packageInfo = await getPackageInfo()\n\n  const program = new Command()\n    .name(\"shadcn-ui\")\n    .description(\"add components and dependencies to your project\")\n    .version(\n      packageInfo.version || \"1.0.0\",\n      \"-v, --version\",\n      \"display the version number\"\n    )\n\n  program.addCommand(init).addCommand(add).addCommand(diff)\n\n  program.parse()\n}\n\nmain()\n","import path from \"path\"\nimport fs from \"fs-extra\"\nimport { type PackageJson } from \"type-fest\"\n\nexport function getPackageInfo() {\n  const packageJsonPath = path.join(\"package.json\")\n\n  return fs.readJSONSync(packageJsonPath) as PackageJson\n}\n"],"mappings":"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","names":["existsSync","fs","path","path","createMatchPath","resolveImport","importPath","config","cosmiconfig","loadConfig","z","DEFAULT_COMPONENTS","DEFAULT_UTILS","DEFAULT_TAILWIND_CSS","DEFAULT_TAILWIND_CONFIG","explorer","cosmiconfig","rawConfigSchema","configSchema","getConfig","cwd","config","getRawConfig","resolveConfigPaths","tsConfig","loadConfig","path","resolveImport","configResult","detect","getPackageManager","targetDir","packageManager","chalk","logger","args","handleError","error","logger","path","z","registryItemSchema","registryIndexSchema","registryItemWithContentSchema","registryWithContentSchema","stylesSchema","registryBaseColorSchema","HttpsProxyAgent","fetch","baseUrl","agent","getRegistryIndex","result","fetchRegistry","registryIndexSchema","getRegistryStyles","stylesSchema","getRegistryBaseColors","getRegistryBaseColor","baseColor","registryBaseColorSchema","resolveTree","index","names","tree","name","entry","dependencies","component","self","fetchTree","style","paths","item","registryWithContentSchema","getItemTargetPath","config","override","parent","type","path","error","fs","tmpdir","path","SyntaxKind","transformCssVars","sourceFile","config","baseColor","node","value","valueWithColorMapping","applyColorMapping","splitClassName","className","parts","rest","alpha","split","name","variant","PREFIXES","input","mapping","classNames","lightMode","darkMode","modifier","prefix","needle","transformImport","sourceFile","config","importDeclarations","importDeclaration","moduleSpecifier","i","transformFromAstSync","parse","transformTypescript","recast","PARSE_OPTIONS","transformJsx","sourceFile","config","output","ast","code","result","SyntaxKind","transformRsc","sourceFile","config","first","Project","ScriptKind","transformers","transformImport","transformRsc","transformCssVars","project","createTempSourceFile","filename","dir","fs","path","tmpdir","transform","opts","tempFile","sourceFile","transformer","transformJsx","chalk","Command","execa","ora","prompts","z","addOptionsSchema","add","components","opts","options","cwd","path","existsSync","logger","config","getConfig","registryIndex","getRegistryIndex","selectedComponents","entry","tree","resolveTree","payload","fetchTree","baseColor","getRegistryBaseColor","proceed","spinner","item","targetDir","getItemTargetPath","fs","file","overwrite","filePath","content","transform","packageManager","getPackageManager","error","handleError","existsSync","fs","path","chalk","Command","diffLines","z","updateOptionsSchema","diff","name","opts","options","cwd","path","existsSync","logger","config","getConfig","registryIndex","getRegistryIndex","targetDir","projectComponents","item","file","filePath","componentsWithUpdates","component","changes","diffComponent","change","printDiff","error","handleError","payload","fetchTree","baseColor","getRegistryBaseColor","getItemTargetPath","fileContent","fs","registryContent","transform","patch","part","existsSync","fs","path","UTILS","UTILS_JS","TAILWIND_CONFIG","TAILWIND_CONFIG_WITH_VARIABLES","TAILWIND_CONFIG_TS","TAILWIND_CONFIG_TS_WITH_VARIABLES","chalk","Command","execa","template","ora","prompts","z","PROJECT_DEPENDENCIES","initOptionsSchema","init","opts","options","cwd","path","existsSync","logger","existingConfig","getConfig","config","promptForConfig","runInit","error","handleError","defaultConfig","skip","highlight","text","styles","getRegistryStyles","baseColors","getRegistryBaseColors","style","color","DEFAULT_TAILWIND_CSS","DEFAULT_TAILWIND_CONFIG","DEFAULT_COMPONENTS","DEFAULT_UTILS","rawConfigSchema","proceed","spinner","targetPath","fs","resolveConfigPaths","key","resolvedPath","dirname","extension","tailwindConfigExtension","tailwindConfigTemplate","TAILWIND_CONFIG_TS_WITH_VARIABLES","TAILWIND_CONFIG_TS","TAILWIND_CONFIG_WITH_VARIABLES","TAILWIND_CONFIG","baseColor","getRegistryBaseColor","UTILS","UTILS_JS","dependenciesSpinner","packageManager","getPackageManager","deps","Command","path","fs","getPackageInfo","packageJsonPath","main","packageInfo","getPackageInfo","program","Command","init","add","diff"]}